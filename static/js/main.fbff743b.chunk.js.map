{"version":3,"sources":["utils/secretSauce.ts","core/ShortsOrPants.tsx","core/Day.tsx","utils/api.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["SecretSauce","SecretSauceOptionsWeights","getTheSecretSauce","options","temperature","windSpeed","humidity","rain","normalizedTemp","normalizeTemp","Temperature","normalizedHumidity","normalizeHumidity","Humidity","normalizedSpeed","normalizeWind","WindSpeed","Pants","Shorts","negativeImpact","value","temp","speed","ShortsOrPants","props","clothing","Day","weather","api","a","p","Promise","resolve","navigator","geolocation","getCurrentPosition","position","setAPPID","setCoordinate","coords","latitude","longitude","getAllWeather","err","json","main","wind","temp_min","temp_max","Tabs","TabPane","App","useState","setWeather","weatherMin","setWeatherMin","weatherMax","setWeatherMax","then","ghost","title","extra","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"qPAEYA,EAcPC,E,+FAdOD,O,mBAAAA,I,kBAAAA,M,cAcPC,O,6BAAAA,I,yBAAAA,I,yBAAAA,M,KAME,IAAMC,EAAoB,SAACC,GAC9B,GAAKA,EAAL,CAD+D,MAIOA,EAA9DC,mBAJuD,MAIzC,GAJyC,IAIOD,EAA5CE,iBAJqC,MAIzB,GAJyB,IAIOF,EAA5BG,gBAJqB,MAIV,GAJU,IAIOH,EAAbI,YAJM,MAIC,EAJD,EAMzDC,EAAiBC,EAAcL,GAAeH,EAA0BS,YACxEC,EAAqBC,EAAkBN,GAAYL,EAA0BY,SAC7EC,EAAkBC,EAAcV,GAAaJ,EAA0Be,UAC7E,OAAIT,EAAO,GACAP,EAAYiB,MAElBT,EAAiBG,EAAqBG,GAAoB,GACpDd,EAAYkB,OAEhBlB,EAAYiB,QAGjBE,EAAiB,SAACC,GACpB,OAASA,GAIPX,EAAgB,SAACY,GACnB,OAAIA,EAFQ,GAGA,EAERA,EANQ,GAOA,GAEHA,EATG,IASJ,IAKNN,EAAgB,SAACO,GACnB,OACWH,EADPG,EAFS,GAGa,EAEtBA,EANS,EAOa,GAEHA,EATV,GASS,KAKpBV,EAAoB,SAACN,GACvB,OAAIA,EAFY,GAGL,EAEPA,EAlBS,EAmBF,GAEHA,EATQ,IAST,ICrDIiB,EAhBqC,SAACC,GAA+B,IACxEC,EAAaD,EAAbC,SAER,OAAgB,MAAZA,EACQ,6BACH,eAKL,6BACKA,GAAYzB,EAAYkB,OAAS,SAAW,UCA1CQ,EATiB,SAACF,GAE7B,OACI,kBAAC,EAAD,CACIC,SAAUvB,EAAkBsB,EAAMG,Y,2CCVjCC,EAAG,uCAAG,4BAAAC,EAAA,6DACTC,EAAI,IAAIC,SAA6B,SAAAC,GAenCC,UAAUC,aACVD,UAAUC,YAAYC,oBAdT,SAACC,GACdT,IAAQU,SAAS,oCACjBV,IAAQW,cAAcF,EAASG,OAAOC,SAAUJ,EAASG,OAAOE,WAChEd,IAAQe,eAAc,SAACC,EAAKC,GACxBZ,EAAQ,CACJ1B,SAAUsC,EAAKC,KAAKvC,SACpBD,UAAWuC,EAAKE,KAAKxB,MACrBlB,YAAawC,EAAKC,KAAKxB,KACvB0B,SAAUH,EAAKC,KAAKE,SACpBC,SAAUJ,EAAKC,KAAKG,oBAZrB,kBAqBRlB,GArBQ,2CAAH,qD,yjBCOImB,IAAZC,Q,IAiDOC,EAtCO,WAAM,MAEMC,qBAFN,mBAEjBzB,EAFiB,KAER0B,EAFQ,OAGYD,qBAHZ,mBAGjBE,EAHiB,KAGLC,EAHK,OAIYH,qBAJZ,mBAIjBI,EAJiB,KAILC,EAJK,KAaxB,OARK9B,GACDC,IAAM8B,MAAK,SAAA/B,GACP0B,EAAW1B,GACX8B,EAAc,EAAD,GAAM9B,EAAN,CAAevB,YAAauB,EAAQqB,YACjDO,EAAc,EAAD,GAAM5B,EAAN,CAAevB,YAAauB,EAAQoB,eAKrD,kBAAC,IAAD,CAAYY,OAAO,EAAOC,MAAM,kBAAkBC,MAAO,IAAzD,WAEI,kBAAC,EAAD,CAAKlC,QAASA,IAFlB,WAII,kBAAC,EAAD,CAAKA,QAAS2B,IAJlB,WAMI,kBAAC,EAAD,CAAK3B,QAAS6B,MC7BNM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBrC,WACrBA,UAAUsC,cAAcC,MAAMd,MAAK,SAAAe,GACjCA,EAAaC,kB","file":"static/js/main.fbff743b.chunk.js","sourcesContent":["import { number } from \"prop-types\";\n\nexport enum SecretSauce {\n    Shorts,\n    Pants\n}\n\nexport interface ISecretSauceOptions {\n    temperature?: number\n    temp_min?: number\n    temp_max?: number\n    windSpeed?: number\n    humidity?: number\n    rain?: number\n}\n\nenum SecretSauceOptionsWeights {\n    Temperature = 1,\n    WindSpeed = 1,\n    Humidity = 0.5,\n}\n\nexport const getTheSecretSauce = (options: ISecretSauceOptions) => {\n    if (!options) {\n        return undefined\n    }\n    const { temperature = 10, windSpeed = 10, humidity = 50, rain = 0 } = options;\n    let magic = 0;\n    const normalizedTemp = normalizeTemp(temperature) * SecretSauceOptionsWeights.Temperature;\n    const normalizedHumidity = normalizeHumidity(humidity) * SecretSauceOptionsWeights.Humidity;\n    const normalizedSpeed = normalizeWind(windSpeed) * SecretSauceOptionsWeights.WindSpeed;\n    if (rain > 50) { //50 percent rain\n        return SecretSauce.Pants\n    }\n    if ((normalizedTemp + normalizedHumidity + normalizedSpeed) >= 0.5) {\n        return SecretSauce.Shorts;\n    }\n    return SecretSauce.Pants;\n}\n\nconst negativeImpact = (value: number) => {\n    return - value;\n}\nconst minTemp = 10\nconst maxTemp = 30\nconst normalizeTemp = (temp: number) => {\n    if (temp > maxTemp) {\n        return (1);\n    }\n    if (temp < minTemp) {\n        return (0)\n    }\n    return ((temp - minTemp) / (maxTemp - minTemp));\n}\n\nconst minSpeed = 0\nconst maxSpeed = 30\nconst normalizeWind = (speed: number) => {\n    if (speed > maxSpeed) {\n        return negativeImpact(1);\n    }\n    if (speed < minSpeed) {\n        return negativeImpact(0)\n    }\n    return negativeImpact((speed - minSpeed) / (maxSpeed - minSpeed));\n}\n\nconst minHumidity = 45\nconst maxHumidity = 95\nconst normalizeHumidity = (humidity: number) => {\n    if (humidity > maxHumidity) {\n        return 1;\n    }\n    if (humidity < minSpeed) {\n        return 0\n    }\n    return (humidity - minHumidity) / (maxHumidity - minHumidity);\n}\n// (value-min)/(max-min)","import React, { useState } from 'react';\nimport { SecretSauce, getTheSecretSauce } from '../utils/secretSauce'\nimport { api } from '../utils/api';\n\ntype ShortsOrPantsProps = {\n    clothing?: SecretSauce\n}\nconst ShortsOrPants: React.FC<ShortsOrPantsProps> = (props: ShortsOrPantsProps) => {\n    const { clothing } = props;\n\n    if (clothing == null) {\n        return (<div>\n            {'Dressing...'}\n        </div>)\n    }\n\n    return (\n        <div>\n            {clothing == SecretSauce.Shorts ? 'Shorts' : 'Pants'}\n        </div>\n    );\n}\n\nexport default ShortsOrPants;\n","import React, { useState } from 'react';\nimport { SecretSauce, getTheSecretSauce, ISecretSauceOptions } from '../utils/secretSauce'\nimport { api } from '../utils/api';\nimport ShortsOrPants from './ShortsOrPants';\n\ntype DayProps = {\n    weather: ISecretSauceOptions\n}\n\nconst Day: React.FC<DayProps> = (props) => {\n\n    return (\n        <ShortsOrPants\n            clothing={getTheSecretSauce(props.weather)} />\n\n    );\n}\n\nexport default Day;\n","import weather from 'openweather-apis';\nimport { ISecretSauceOptions } from './secretSauce';\n\nexport const api = async () => {\n    const p = new Promise<ISecretSauceOptions>(resolve => {\n\n        const callback = (position: Position) => {\n            weather.setAPPID('867ecfea9e19b03a3c2f4147b5790157');\n            weather.setCoordinate(position.coords.latitude, position.coords.longitude);\n            weather.getAllWeather((err, json) => {\n                resolve({\n                    humidity: json.main.humidity,\n                    windSpeed: json.wind.speed,\n                    temperature: json.main.temp,\n                    temp_min: json.main.temp_min,\n                    temp_max: json.main.temp_max,\n                })\n            });\n        }\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(callback);\n        }\n    });\n\n    return p\n\n}\n\n","import React, { useState } from \"react\";\nimport \"./App.css\";\n// import { ThemeProvider, makeStyles } from '@material-ui/styles';\n// import { Theme, theme } from './theme';\nimport ShortsOrPants from \"./core/ShortsOrPants\";\nimport { SecretSauce } from \"./utils/secretSauce\";\nimport { Tabs, PageHeader, Button, Descriptions } from \"antd\";\nimport Day from \"./core/Day\";\nimport { api } from \"./utils/api\";\n\nconst { TabPane } = Tabs;\n\n// const useStyles = makeStyles((theme: Theme) => ({\n//   root: {\n//     // background: theme.palette.secondary.main,\n//     fontSize: 16,\n//     // color: 'white',\n//     height: '100%',\n//   },\n// }));\n\nconst App: React.FC = () => {\n    // const classes = useStyles();\n    const [weather, setWeather] = useState();\n    const [weatherMin, setWeatherMin] = useState();\n    const [weatherMax, setWeatherMax] = useState();\n    if (!weather) {\n        api().then(weather => {\n            setWeather(weather);\n            setWeatherMax({ ...weather, temperature: weather.temp_max });\n            setWeatherMin({ ...weather, temperature: weather.temp_min });\n        });\n    }\n\n    return (\n        <PageHeader ghost={false} title=\"Shorts or Pants\" extra={[]}>\n            Current:\n            <Day weather={weather} />\n            Hottest:\n            <Day weather={weatherMin} />\n            Coldest:\n            <Day weather={weatherMax} />\n            {/* <Tabs defaultActiveKey=\"1\" >\n        <TabPane tab=\"Today\" key=\"1\">\n          <Day weather={weather} />\n        </TabPane>\n        <TabPane tab=\"Tomorrow\" key=\"2\">\n          <ShortsOrPants\n            clothing={SecretSauce.Shorts} />\n        </TabPane>\n        <TabPane tab=\"Week\" key=\"3\">\n          <ShortsOrPants\n            clothing={SecretSauce.Shorts} />\n        </TabPane>\n      </Tabs> */}\n        </PageHeader>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}